from ExerciseType import ExerciseType
from Appointment import Appointment
from Exercise import Exercise
from Client import Client
from FitnessSheet import FitnessSheet
import telebot
from telebot import types
# from telegram import Update
# from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from enum import Enum


class SelectedWorkflow(Enum):
    NONE = 0
    CREATE_APPOINTMENT = 1
    GET_APPOINTMENTS = 2
    DELETE_APPOINTMENT = 3
    GIVE_FEEDBACK = 4


class BotCache:
    def __init__(self, client: Client = None):
        self.__client: Client = client
        self.__workflow: SelectedWorkflow = SelectedWorkflow.NONE
        self.__appointments: list[Appointment] = []
        self.__new_to_bot = False

    def get_client(self) -> Client:
        return self.__client

    def set_client(self, client: Client):
        self.__new_to_bot = self.__client is None
        self.__client = client

    def is_new_to_bot(self) -> bool:
        is_new: bool = self.__new_to_bot
        self.__new_to_bot = False
        return is_new

    def get_workflow(self) -> SelectedWorkflow:
        return self.__workflow

    def set_workflow(self, workflow: SelectedWorkflow):
        self.__workflow = workflow

    def get_appointments(self) -> list[Appointment]:
        return self.__appointments

    def reset_appointments(self):
        self.__appointments = []

    def set_appointments(self, appointments: list[Appointment]):
        self.__appointments = appointments

    def add_appointment(self, appointment: Appointment):
        self.__appointments.append(appointment)


class Bot:
    __min_shoe_size = 34
    __max_shoe_size = 46
    __admin_id = 413423581

    def __init__(self, token: str, fitness_sheet: FitnessSheet):
        self.__fitness_sheet: FitnessSheet = fitness_sheet
        self.__exercise_types: {str, ExerciseType} = {}
        self.__make_exercise_types()
        self.__bot_cache: {str, BotCache} = {}

        self.__bot = telebot.TeleBot(token)
        self.__welcome_handler = self.__bot.message_handler(commands=['start'])(self.__send_welcome)
        self.__restart_handler = self.__bot.message_handler(commands=['restart'])(self.__restart)
        self.__help_handler = self.__bot.message_handler(commands=['help'])(self.__help_command)
        self.__contact_handler = self.__bot.message_handler(func=lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")(self.__contact_us)
        self.__appointments_handler = self.__bot.message_handler(func=lambda message: message.text == "üëÄ –ú–æ—ó –∑–∞–ø–∏—Å–∏")(self.__my_appointments)
        self.__about_handler = self.__bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å")(self.__about_us)
        self.__request_usr_data_handler = self.__bot.message_handler(func=lambda message: message.text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –≥—Ä—É–ø–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")(self.__start_appointment_creation)
        self.__get_client_data_handler = self.__bot.message_handler(content_types=['contact'])(self.__get_phone_and_create_client)
        self.__save_training_type_handler = self.__bot.message_handler(func=lambda message: message.text in self.__exercise_types.keys())(self.__save_training_type)
        self.__callback_handler = self.__bot.callback_query_handler(func=lambda call: True)(self.__query_callback)
        self.__delete_appointments = self.__bot.message_handler(func=lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")(self.__delete_my_appointment)
        self.__feedback_command_handler = self.__bot.message_handler(commands=['feedback'])(self.__feedback_handler)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        print('Polling...')
        self.__bot.polling()

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
    def __send_welcome(self, message):
        self.__make_exercise_types()
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button1 = types.KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –≥—Ä—É–ø–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
        button2 = types.KeyboardButton("üëÄ –ú–æ—ó –∑–∞–ø–∏—Å–∏")
        button3 = types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
        button4 = types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å")
        button5 = types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
        keyboard.add(button1)
        keyboard.add(button2, button3)
        keyboard.add(button4, button5)
        # –í—ñ—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        welcome_message = "–í—ñ—Ç–∞—î–º–æ —É ArmyFitness! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
        self.__bot.reply_to(message, welcome_message, reply_markup=keyboard)

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /restart
    def __restart(self, message):
        self.__make_exercise_types()
        self.__set_workflow(message, SelectedWorkflow.NONE)
        self.__reset_client_appointments(message)
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ—Ç–∞–Ω–Ω—è –∑–Ω–æ–≤—É
        self.__send_welcome(message)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ—Ç–∞–Ω–Ω—è –∑–Ω–æ–≤—É

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /help
    def __help_command(self, message):
        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ —Å–º–∞–π–ª–∏–∫–æ–º
        help_text = "–ó–≤'—è–∂–∏—Å—å –∑ –Ω–∞–º–∏, —è–∫—â–æ —É —Ç–µ–±–µ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è: +380 (68) 685 19 03 üìû"
        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º
        self.__bot.reply_to(message, help_text)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /feedback
    def __feedback_handler(self, message):
        self.__set_workflow(message, SelectedWorkflow.GIVE_FEEDBACK)
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç
        if self.__is_client_known(message):
            self.__get_feedback(message)
        else:
            # –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤—ñ–¥–æ–º–∏–π, –ø—Ä–æ—Å–∏–º–æ –π–æ–≥–æ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
            self.__request_user_data(message)

    def __get_feedback(self, message):
        self.__bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫:", reply_markup=types.ReplyKeyboardRemove())
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω - –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–≥—É–∫
        self.__bot.register_next_step_handler(message, self.__send_feedback_to_admin)

    def __send_feedback_to_admin(self, message):
        self.__set_workflow(message, SelectedWorkflow.NONE)
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.__bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!")
        self.__admin_notification_feedback(message)
        self.__restart(message)

    def __is_client_known(self, message) -> bool:
        return message.chat.id in self.__bot_cache.keys() and \
               self.__bot_cache[message.chat.id] is not None and \
               self.__bot_cache[message.chat.id].get_client() is not None

    def __get_client(self, message) -> Client:
        if self.__is_client_known(message):
            return self.__bot_cache[message.chat.id].get_client()
        else:
            return None

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç–∏ üìû"
    def __contact_us(self, message):
        contact_text = (
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> \n+380 (68) 685 19 03\n\n"
            "üìç <b>–ó–Ω–∞–π—Ç–∏ –Ω–∞—Å:</b> –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–∞—Å –Ω–∞ Google Maps: <a href='https://maps.app.goo.gl/qkmrEqqbpF64iNm38'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ Google Maps</a>\n\n"
            "üì∫ <b>Instagram:</b> –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞–º–∏ —É <a href='https://www.instagram.com/armyfitness.kyiv/'>Instagram</a> —ñ –¥—ñ–∑–Ω–∞–≤–∞–π—Ç–µ—Å—è –ø—Ä–æ –Ω–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó —Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\n\n"
            "üë§ <b>Facebook:</b> –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —É <a href='https://www.facebook.com/armyfitnessstudio/'>Facebook</a> —Ç–∞ –±–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É –Ω–∞—à–∏—Ö —Å–ø—ñ–ª—å–Ω–æ—Ç–∞—Ö —Ç–∞ –∞–∫—Ü—ñ—è—Ö!\n\n"
            "üåê <b>–°–∞–π—Ç:</b> –í—ñ–¥–≤—ñ–¥–∞–π—Ç–µ –Ω–∞—à <a href='https://w.wlaunch.net/i/armyfitness/b/e62e1248-c4f3-11ee-b6a9-252e06c66558/s'>–≤–µ–±-—Å–∞–π—Ç</a> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —Ç–∞ –ø–æ—Å–ª—É–≥–∏ —Å—Ç—É–¥—ñ—ó."
        )

        self.__bot.reply_to(message, contact_text, parse_mode='HTML')

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ –Ω–∞—Å ‚ÑπÔ∏è"
    def __about_us(self, message):
        about_text = (
            "<b> ARMY fitness studio </b>\n\n"
            "–ù–∞—à–∞ —Å—Ç—É–¥—ñ—è –ø—Ä–æ –ª—é–±–æ–≤ –¥–æ —Å–µ–±–µ —Ç–∞ —Å–≤–æ–≥–æ —Ç—ñ–ª–∞, –º–∏ –∑–∞–∫–æ—Ö—É—î–º–æ –¥—ñ–≤—á–∞—Ç –≤ —Å–ø–æ—Ä—Ç, –º–æ—Ç–∏–≤—É—î–º–æ —Ç–∞ –Ω–∞–¥–∏—Ö–∞—î–º–æ —Å—Ç–∞–≤–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å! "
            "–ù–∞—à–∞ –º—ñ—Å—ñ—è - —Ü–µ –∑–¥–æ—Ä–æ–≤–µ, –∫—Ä–∞—Å–∏–≤–µ —Ç—ñ–ª–æ —Ç–∞ —â–∞—Å–ª–∏–≤–∞ —ñ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞ –¢–ò! –ó –Ω–∞–º–∏ —Å—Ö—É–¥–ª–æ –±—ñ–ª—å—à–µ 1000 –¥—ñ–≤—á–∞—Ç –±–µ–∑ –¥—ñ—î—Ç —Ç–∞ –∂–æ—Ä—Å—Ç–∫–∏—Ö –æ–±–º–µ–∂–µ–Ω—å üí™üèºüåü\n\n"
            "<b>Kangoo Jumps:</b> –∫–∞—Ä–¥—ñ–æ –±–µ–∑ –±—ñ–≥—É, —Å–ø–∞–ª—é—î –¥–æ 1000 –∫–∫–∞–ª –∑–∞ –≥–æ–¥–∏–Ω—É, —Ä–æ–∑–≥—Ä—É–∂–∞—î —Å—É–≥–ª–æ–±–∏, —Å–ø—Ä–∏—è—î —Å—Ö—É–¥–Ω–µ–Ω–Ω—é —Ç–∞ –ø—ñ–¥–Ω—ñ–º–∞—î –Ω–∞—Å—Ç—Ä—ñ–π.\n\n"
            "<b>–°–∏–ª–æ–≤–∞ Full Body:</b> —Å–∏–ª–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é, —Ñ–æ—Ä–º—É—î —Ä–µ–ª—å—î—Ñ–Ω–µ —Ç–∞ —Å–∏–ª—å–Ω–µ —Ç—ñ–ª–æ, –ø–æ–∑–±–∞–≤–ª—è—î –≤—ñ–¥ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –∑–æ–Ω, –Ω–∞–¥–∞—î —Å—Ç—Ä—É–Ω–∫—É —Ñ—ñ–≥—É—Ä—É, –∫—Ä–∞—Å–∏–≤—ñ —Ä—É–∫–∏ —Ç–∞ –ø—Ä–µ—Å.\n\n"
            "<b>–†–æ–∑—Ç—è–∂–∫–∞ Stretching:</b> —Ü–µ –∫–æ–º–ø–ª–µ–∫—Å –≤–ø—Ä–∞–≤ –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ —Ç—ñ–ª–∞, —Ä–µ–ª–∞–∫—Å—É—é—á–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —â–æ –ø–æ–∫—Ä–∞—â—É—î –ø–æ—Å—Ç–∞–≤—É —Ç–∞ —Ä–æ–∑—Ç—è–∂–∫—É.\n\n"
            "<b>TRX:</b> —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –≤–ª–∞—Å–Ω–æ—é –≤–∞–≥–æ—é –¥–ª—è –≤—Å—å–æ–≥–æ —Ç—ñ–ª–∞, –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏, —Ä–æ–∑–≤–∏–≤–∞—î —Å–∏–ª—É, –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, –≥–Ω—É—á–∫—ñ—Å—Ç—å —Ç–∞ —Ä—ñ–≤–Ω–æ–≤–∞–≥—É."
        )
        self.__bot.reply_to(message, about_text, parse_mode='HTML')

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ—ó 1 - "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –≥—Ä—É–ø–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üèãÔ∏è‚Äç‚ôÇÔ∏è"
    def __start_appointment_creation(self, message):
        self.__make_exercise_types()
        self.__set_workflow(message, SelectedWorkflow.CREATE_APPOINTMENT)
        if self.__is_client_known(message):
            self.__choose_training_type(message)
        else:
            self.__request_user_data(message)

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
    def __request_user_data(self, message):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—ñ–ª—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button = types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
        keyboard.add(button)
        self.__bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=keyboard)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    def __get_phone_and_create_client(self, message):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫—É user_data
        client: Client = Client(message.contact.user_id, message.contact.first_name, message.contact.last_name, message.contact.phone_number)
        self.__set_client(message, client)
        if self.__get_workflow(message) == SelectedWorkflow.CREATE_APPOINTMENT:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É - –≤–∏–±–æ—Ä—É –≤–∏–¥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            self.__choose_training_type(message)
        elif self.__get_workflow(message) == SelectedWorkflow.GET_APPOINTMENTS:
            self.__show_appointments(message)
        elif self.__get_workflow(message) == SelectedWorkflow.DELETE_APPOINTMENT:
            self.__show_appointments(message)
        elif self.__get_workflow(message) == SelectedWorkflow.GIVE_FEEDBACK:
            self.__get_feedback(message)
        else:
            self.__restart(message)

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∏–¥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    def __choose_training_type(self, message):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∏–¥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

        for et in self.__exercise_types.keys():
            keyboard.add(types.KeyboardButton(et))

        # –ó–∞–ø–∏—Ç—É—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.__bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)

    # Make excersizetypes as a Dictionary
    def __make_exercise_types(self):
        ex_types: list[ExerciseType] = self.__fitness_sheet.get_exercise_types()
        for et in ex_types:
            self.__exercise_types[et.get_name()] = et

    def __save_training_type(self, message):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –≤–∏–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫—É user_data
        ex_type_name = message.text
        self.__exercise_type = self.__exercise_types[ex_type_name]

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        exercises: list[Exercise] = self.__get_exercises()
        schedule: list[str] = []
        for ex in exercises:
            if ex.get_free_slots() > 0:
                schedule.append(ex.get_timestamp())

        if len(schedule) > 0:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            keyboard = types.InlineKeyboardMarkup()
            for item in schedule:
                button = types.InlineKeyboardButton(text=item, callback_data=item)
                keyboard.add(button)
            self.__bot.reply_to(message, f"–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {message.text}:", reply_markup=keyboard)
        else:
            self.__bot.reply_to(message, "–ù–∞ –∂–∞–ª—å, —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")

    def __query_callback(self, call):
        if self.__get_workflow(call.message) == SelectedWorkflow.CREATE_APPOINTMENT:
            self.__create_appointment(call)
        elif self.__get_workflow(call.message) == SelectedWorkflow.GET_APPOINTMENTS:
            self.__restart(call.message)
        elif self.__get_workflow(call.message) == SelectedWorkflow.DELETE_APPOINTMENT:
            self.__delete_appointment(call)
        else:
            self.__restart(call.message)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    def __create_appointment(self, call):
        if self.__get_workflow(call.message) != SelectedWorkflow.CREATE_APPOINTMENT:
            self.__restart(call.message)
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫—É user_data
        self.__timestamp = call.data
        client: Client = self.__get_client(call.message)
        foot_size = 0 if client is None else client.get_foot_size()
        if self.__exercise_type.is_size_foot_required() and foot_size == 0:
            # –ó–∞–ø–∏—Ç—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è –ª–∏—à–µ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è KANGOO JUMPS
            self.__bot.send_message(call.message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è:", reply_markup=types.ReplyKeyboardRemove())
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω - –æ—á—ñ–∫—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è
            self.__bot.register_next_step_handler(call.message, self.__save_shoe_size)
        else:
            # –í —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –≤—ñ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–∫–ª—é—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self.__make_appointment(call.message)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤–∑—É—Ç—Ç—è
    def __save_shoe_size(self, message):
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è
            shoe_size = int(message.text)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 34-46
            if self.__min_shoe_size <= shoe_size <= self.__max_shoe_size:
                self.__get_client(message).set_foot_size(shoe_size)
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–∫–ª—é—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                self.__make_appointment(message)
            else:
                # –Ø–∫—â–æ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 34-46, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.__bot.reply_to(message, f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ {self.__min_shoe_size} –¥–æ {self.__max_shoe_size}.", reply_markup=types.ReplyKeyboardRemove())
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è
                self.__bot.register_next_step_handler(message, self.__save_shoe_size)
        except ValueError:
            # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è –Ω–µ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ç–∞ –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è –∑–Ω–æ–≤—É
            self.__bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞.", reply_markup=types.ReplyKeyboardRemove())
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è
            self.__bot.register_next_step_handler(message, self.__save_shoe_size)

    def __get_exercises(self) -> list[Exercise]:
        if self.__exercise_type is None:
            return None
        else:
            return self.__fitness_sheet.get_exercises(self.__exercise_type)

    def __make_appointment(self, message):
        appointment: Appointment = self.__fitness_sheet.make_appointment(self.__create_new_appointment(message))
        if appointment is None:
            final_message = "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –Ω–∞ –∫—É—Ä—Å"
            self.__bot.send_message(message.chat.id, final_message)
        else:
            self.__send_final_message(message, appointment)

    # –ó–∞–∫–ª—é—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É
    def __send_final_message(self, message, appointment: Appointment):
        self.__set_workflow(message, SelectedWorkflow.NONE)
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        google_maps_link = "https://maps.app.goo.gl/qkmrEqqbpF64iNm38"
        final_message: str = ""
        if appointment.get_status() == Appointment.Status.SUCCESS:
            final_message = f"–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–∏—Å, {appointment.get_client().get_first_name()}! üéâ\n"
            final_message += f"–ß–µ–∫–∞—î–º–æ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ –∑ {appointment.get_exercise().get_type().get_name()}! üí™üèº \n\n"
            final_message += f"üóìÔ∏è –î–∞—Ç–∞ —Ç–∞ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {appointment.get_exercise().get_timestamp()}. \n"
            final_message += f"üìç –ú—ñ—Å—Ü–µ –∑—É—Å—Ç—Ä—ñ—á—ñ: {google_maps_link} \n"
            final_message += "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +380 (68) 685 19 03"
        elif appointment.get_status() == Appointment.Status.GROUPFULL:
            final_message = f"–í–∏–±–∞—á—Ç–µ, {appointment.get_client().get_first_name()}. –ì—Ä—É–ø–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å"
        elif appointment.get_status() == Appointment.Status.NOTFOUND:
            final_message = f"–í–∏–±–∞—á—Ç–µ, {appointment.get_client().get_first_name()}. –∑–∞–Ω—è—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        elif appointment.get_status() == Appointment.Status.ALREADY_ADDED:
            final_message = f"{appointment.get_client().get_first_name()}, –≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ –æ–±—Ä–∞–Ω–æ–º—É –∑–∞–Ω—è—Ç—Ç—ñ"
        elif appointment.get_status() == Appointment.Status.EXERCISE_IN_PAST:
            final_message = f"{appointment.get_client().get_first_name()}, –Ω–∞–∂–∞–ª—å, —Ü–µ –∑–∞–Ω—è—Ç—Ç—è –≤–∂–µ –º–∏–Ω—É–ª–æ"
        else:
            final_message = "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –Ω–∞ –∫—É—Ä—Å"

        if appointment.get_client().is_created():
            self.__admin_notification_new_client(message)

        if appointment.is_reserved_capacity():
            self.__admit_notification_reserved_capacity(appointment)

        self.__bot.send_message(message.chat.id, final_message)
        self.__restart(message)

    def __create_new_appointment(self, message) -> Appointment:
        exercises: list[Exercise] = self.__get_exercises()
        for ex in exercises:
            if ex.is_right_exercise_for_appointment(self.__exercise_type, self.__timestamp):
                return Appointment(self.__get_client(message), ex)
        return None

    def __my_appointments(self, message):
        self.__set_workflow(message, SelectedWorkflow.GET_APPOINTMENTS)
        if not self.__is_client_known(message):
            self.__request_user_data(message)
        else:
            self.__show_appointments(message)

    def __show_appointments(self, message):
        final_message: str = ""
        appointments: list[Appointment] = self.__fitness_sheet.get_appointments(self.__get_client(message), self.__get_workflow(message) == SelectedWorkflow.GET_APPOINTMENTS)
        self.__cache_appointments(message, appointments)
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = types.InlineKeyboardMarkup()
        if len(appointments) > 0:
            for appointment in appointments:
                # button = types.KeyboardButton(str(appointment))
                button = types.InlineKeyboardButton(text=str(appointment), callback_data=str(appointment))
                keyboard.add(button)
            if self.__get_workflow(message) == SelectedWorkflow.DELETE_APPOINTMENT:
                final_message = "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:"
            elif self.__get_workflow(message) == SelectedWorkflow.GET_APPOINTMENTS:
                final_message = "–û—Å—å —Ä–æ–∑–∫–ª–∞–¥ –í–∞—à–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:"
            else:
                self.__restart(message)
                return
        else:
            final_message = "–ù–∞–∂–∞–ª—å, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ."

        button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")
        keyboard.add(button)
        self.__bot.reply_to(message, final_message, reply_markup=keyboard)
        if self.__bot_cache[message.chat.id].is_new_to_bot() and self.__get_workflow(message) != SelectedWorkflow.DELETE_APPOINTMENT:
            self.__restart(message)

    def __delete_my_appointment(self, message):
        self.__set_workflow(message, SelectedWorkflow.DELETE_APPOINTMENT)
        if not self.__is_client_known(message):
            self.__request_user_data(message)
        else:
            self.__show_appointments(message)

    def __delete_appointment(self, call):
        final_message: str = ""
        appointments: list[Appointment] = self.__get_client_appointments(call.message)
        final_message = "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–ª–∏–≤–µ."
        if appointments is not None and len(appointments) > 0:
            for appointment in appointments:
                if str(appointment) == call.data:
                    if self.__fitness_sheet.delete_appointment(appointment):
                        self.__admint_notifications_appointment_deleted(appointment)
                        final_message = f"–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ: {str(appointment)}"
        self.__reset_client_appointments(call.message)
        self.__set_workflow(call.message, SelectedWorkflow.NONE)
        if call.data != "–ù–∞–∑–∞–¥":
            self.__bot.send_message(chat_id=call.message.chat.id, text=final_message)
        self.__restart(call.message)

    def __admin_notification_new_client(self, message):
        if self.__is_client_known(message) and self.__get_client(message).is_created():
            self.__bot.send_message(chat_id=self.__admin_id, text=f'New Client: {str(self.__get_client(message))}')
            self.__get_client(message).reset_created()

    def __admit_notification_reserved_capacity(self, appointment: Appointment):
        self.__bot.send_message(chat_id=self.__admin_id, text=f'Appointment in the RESERVED capacity: {str(appointment)}, client: {str(appointment.get_client())}')

    def __admint_notifications_appointment_deleted(self, appointment: Appointment):
        self.__bot.send_message(chat_id=self.__admin_id, text=f'Appointment canceled: {str(appointment)}, client: {str(appointment.get_client())}')

    def __admin_notification_feedback(self, message):
        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–≥—É–∫–æ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        self.__bot.send_message(chat_id=self.__admin_id, text=f"–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ {self.__get_client(message).get_first_name()}: {message.text}")

    def __cache_appointments(self, message, appointments: list[Appointment]):
        bot_cache: BotCache = None if message.chat.id not in self.__bot_cache.keys() else self.__bot_cache[message.chat.id]
        if bot_cache is not None:
            bot_cache.set_appointments(appointments)

    def __get_client_appointments(self, message) -> list[Appointment]:
        if message.chat.id in self.__bot_cache.keys():
            return self.__bot_cache[message.chat.id].get_appointments()
        else:
            return None

    def __reset_client_appointments(self, message):
        if message.chat.id in self.__bot_cache.keys():
            self.__bot_cache[message.chat.id].reset_appointments()

    def __set_client(self, message, client: Client):
        if message.chat.id not in self.__bot_cache.keys():
            self.__bot_cache[message.chat.id] = BotCache(client)
        else:
            self.__bot_cache[message.chat.id].set_client(client)

    def __set_workflow(self, message, workflow: SelectedWorkflow):
        if message.chat.id not in self.__bot_cache.keys():
            self.__bot_cache[message.chat.id] = BotCache(None)
        self.__bot_cache[message.chat.id].set_workflow(workflow)

    def __get_workflow(self, message) -> SelectedWorkflow:
        if message.chat.id in self.__bot_cache.keys():
            return self.__bot_cache[message.chat.id].get_workflow()
        else:
            return SelectedWorkflow.NONE
